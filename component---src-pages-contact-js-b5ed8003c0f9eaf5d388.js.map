{"version":3,"sources":["webpack:///./src/pages/contact.js","webpack:///./src/images/contact.png"],"names":["config","script","sheet","Thanks","className","Contact","props","handleClick","form","state","setState","clicked","honeypot","xhr","XMLHttpRequest","open","setRequestHeader","onreadystatechange","sent","encoded","Object","keys","map","k","encodeURIComponent","join","send","handleChange","target","id","value","name","message","email","bind","render","this","title","src","contact","alt","htmlFor","onChange","key","placeholder","rows","type","required","style","display","disabled","onClick","Component","module","exports"],"mappings":"+XAMA,IAAMA,EAAS,CACbC,OACE,mGACFC,MAAO,aAIHC,EAAS,kBACb,yBAAKC,UAAU,oBACb,uFAIiBC,E,oBACnB,WAAYC,GAAQ,IAAD,SACjB,cAAMA,IAAN,MAgBFC,YAAc,WAAO,IACXC,EAAS,EAAKC,MAAdD,KAGR,EAAKE,SAAS,CAAEC,SAAS,IASzB,GADqBH,EAAbI,SAEN,OAAO,EAIT,IAAMC,EAAM,IAAIC,eAChBD,EAAIE,KAAK,OAAQf,EAAOC,QAExBY,EAAIG,iBAAiB,eAAgB,qCACrCH,EAAII,mBAAqB,WAdvB,EAAKP,SAAS,CAAEQ,MAAM,KAiBxB,IAAMC,EAAUC,OAAOC,KAAKb,GACzBc,KAAI,SAAAC,GACH,OAAUC,mBAAmBD,GAA7B,IAAmCC,mBAAmBhB,EAAKe,OAE5DE,KAAK,KAIR,OADAZ,EAAIa,KAAKP,IACF,GAlDU,EAqDnBQ,aAAe,YAAiB,IAAdC,EAAa,EAAbA,OACRC,EAAcD,EAAdC,GAAIC,EAAUF,EAAVE,MACJrB,EAFqB,KAErBA,MACRA,EAAMD,KAAKqB,GAAMC,EACjB,EAAKpB,SAASD,IAvDd,EAAKA,MAAQ,CACXD,KAAM,CACJuB,KAAM,GACNC,QAAS,GACTC,MAAO,GACPrB,SAAU,IAEZM,MAAM,EACNP,SAAS,GAGX,EAAKgB,aAAe,EAAKA,aAAaO,KAAlB,MACpB,EAAK3B,YAAc,EAAKA,YAAY2B,KAAjB,MAdF,E,0GA4DnBC,OAAA,WAAU,IAAD,SAKHC,KAAK3B,MALF,IAELD,KAAQuB,EAFH,EAEGA,KAAMC,EAFT,EAESA,QAASC,EAFlB,EAEkBA,MAAOrB,EAFzB,EAEyBA,SAC9BM,EAHK,EAGLA,KACAP,EAJK,EAILA,QAGF,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAK0B,MAAM,yBACX,yBAAKjC,UAAU,qBACb,yBAAKA,UAAU,iCACb,6CACA,6BACA,0GAGA,yBAAKkC,IAAKC,IAASC,IAAI,iBAEvB,gDACA,6BACA,6IAGE,6BACA,6BAJF,0CASF,yBAAKpC,UAAU,kBACZc,EACC,kBAACf,EAAD,MAEA,oCACE,8BAIE,kDACA,6BACE,kCACE,2BAAOsC,QAAQ,QAAf,SACA,2BACEC,SAAUN,KAAKT,aACfE,GAAG,OACHc,IAAI,OACJZ,KAAK,OACLa,YAAY,0BACZd,MAAOC,KAGX,kCACE,2BAAOU,QAAQ,WAAf,YACA,8BACEC,SAAUN,KAAKT,aACfE,GAAG,UACHc,IAAI,UACJZ,KAAK,UACLc,KAAM,GACND,YAAY,0BACZd,MAAOE,KAGX,kCACE,2BAAOS,QAAQ,SAAf,uBACA,2BACEC,SAAUN,KAAKT,aACfE,GAAG,QACHc,IAAI,QACJZ,KAAK,QACLe,KAAK,QACLC,UAAQ,EACRH,YAAY,sBACZd,MAAOG,KAGX,8BACE7B,UAAU,iBACV4C,MAAO,CAAEC,QAAS,SAElB,2BAAOR,QAAQ,YAGb,2BACEC,SAAUN,KAAKT,aACfE,GAAG,WACHc,IAAI,WACJG,KAAK,OACLf,KAAK,WACLD,MAAOlB,MAIZD,EACC,4BAAQmC,KAAK,SAASI,UAAQ,GAA9B,WAIA,4BAAQJ,KAAK,SAASK,QAAS,kBAAM,EAAK5C,gBAA1C,e,GAhKe6C,c,qBCnBrCC,EAAOC,QAAU,IAA0B","file":"component---src-pages-contact-js-b5ed8003c0f9eaf5d388.js","sourcesContent":["import React, { Component } from \"react\"\n\nimport SEO from \"../components/seo\"\nimport Layout from \"../components/layout\"\nimport contact from \"../images/contact.png\"\n\nconst config = {\n  script:\n    \"https://script.google.com/macros/s/AKfycbwT3nWYek5iDGGU5hLrzzcriAyYENTYv11qSusp8raUQn2gr6Bf/exec\",\n  sheet: \"responses\",\n  // email: '',\n}\n\nconst Thanks = () => (\n  <div className=\"thankyou_message\">\n    <h2>Thanks for reaching out. I will get back to you soon!</h2>\n  </div>\n)\n\nexport default class Contact extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      form: {\n        name: \"\",\n        message: \"\",\n        email: \"\",\n        honeypot: \"\",\n      },\n      sent: false,\n      clicked: false,\n    }\n\n    this.handleChange = this.handleChange.bind(this)\n    this.handleClick = this.handleClick.bind(this)\n  }\n\n  handleClick = () => {\n    const { form } = this.state\n\n    // loading\n    this.setState({ clicked: true })\n\n    // sent\n    const setSent = () => {\n      this.setState({ sent: true })\n    }\n\n    // checking if bot\n    const { honeypot } = form\n    if (honeypot) {\n      return false\n    }\n\n    // sending through xhr as axios won't work (CORS)\n    const xhr = new XMLHttpRequest()\n    xhr.open(\"POST\", config.script)\n    // xhr.withCredentials = true\n    xhr.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded\")\n    xhr.onreadystatechange = function xhrGo() {\n      setSent()\n    }\n    const encoded = Object.keys(form)\n      .map(k => {\n        return `${encodeURIComponent(k)}=${encodeURIComponent(form[k])}`\n      })\n      .join(\"&\")\n\n    // finally sending\n    xhr.send(encoded)\n    return true\n  }\n\n  handleChange = ({ target }) => {\n    const { id, value } = target\n    const { state } = this\n    state.form[id] = value\n    this.setState(state)\n  }\n\n  render() {\n    const {\n      form: { name, message, email, honeypot },\n      sent,\n      clicked,\n    } = this.state\n\n    return (\n      <Layout>\n        <SEO title=\"Mark Bosch - Contact\" />\n        <div className=\"contact-container\">\n          <div className=\"contact-information-container\">\n            <h1> Studio work </h1>\n            <br></br>\n            <p>\n              Mark is available for session and studio work as well as live performances.\n            </p>\n            <img src={contact} alt=\"bosch-jammin\" />\n\n            <h1> Private lessons</h1>\n            <br></br>\n            <p>\n              Mark has been teaching guitar for over 30 years. Students have\n              included Lou Reed, Billy Crudup and Liah Alonso.\n              <br></br>\n              <br></br>\n              Reach out for a Zoom or Skype lesson.\n            </p>\n          </div>\n\n          <div className=\"form-container\">\n            {sent ? (\n              <Thanks />\n            ) : (\n              <>\n                <form\n                // method=\"POST\"\n                // action={config.script} // change this url\n                >\n                  <h1> Send me a message</h1>\n                  <div>\n                    <fieldset>\n                      <label htmlFor=\"name\">Name:</label>\n                      <input\n                        onChange={this.handleChange}\n                        id=\"name\"\n                        key=\"name\"\n                        name=\"name\"\n                        placeholder=\"What your Mom calls you\"\n                        value={name}\n                      />\n                    </fieldset>\n                    <fieldset>\n                      <label htmlFor=\"message\">Message:</label>\n                      <textarea\n                        onChange={this.handleChange}\n                        id=\"message\"\n                        key=\"message\"\n                        name=\"message\"\n                        rows={10}\n                        placeholder=\"Tell me all about it...\"\n                        value={message}\n                      />\n                    </fieldset>\n                    <fieldset>\n                      <label htmlFor=\"email\">Your Email Address:</label>\n                      <input\n                        onChange={this.handleChange}\n                        id=\"email\"\n                        key=\"email\"\n                        name=\"email\"\n                        type=\"email\"\n                        required\n                        placeholder=\"your.name@email.com\"\n                        value={email}\n                      />\n                    </fieldset>\n                    <fieldset\n                      className=\"honeypot-field\"\n                      style={{ display: \"none\" }}\n                    >\n                      <label htmlFor=\"honeypot\">\n                        {/* To help avoid spam, utilize a Honeypot technique with a hidden text field; must\n                    be empty to submit the form! Otherwise, we assume the user is a spam bot. */}\n                        <input\n                          onChange={this.handleChange}\n                          id=\"honeypot\"\n                          key=\"honeypot\"\n                          type=\"text\"\n                          name=\"honeypot\"\n                          value={honeypot}\n                        />\n                      </label>\n                    </fieldset>\n                    {clicked ? (\n                      <button type=\"button\" disabled>\n                        Loading\n                      </button>\n                    ) : (\n                      <button type=\"button\" onClick={() => this.handleClick()}>\n                        Send\n                      </button>\n                    )}\n                  </div>\n                </form>\n              </>\n            )}\n          </div>\n        </div>\n      </Layout>\n    )\n  }\n}\n","module.exports = __webpack_public_path__ + \"static/contact-6a9d06c5644338274302fb7a9edbc68d.png\";"],"sourceRoot":""}